<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Servlet实现登录</title>
      <link href="/2019/07/24/servlet-shi-xian-deng-lu/"/>
      <url>/2019/07/24/servlet-shi-xian-deng-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><pre><code>用户登录案例需求：1.编写login.html登录页面    username &amp; password 两个输入框2.使用Druid数据库连接池技术,操作mysql，day14数据库中user表3.使用JdbcTemplate技术封装JDBC4.登录成功跳转到SuccessServlet展示：登录成功！用户名,欢迎您5.登录失败跳转到FailServlet展示：登录失败，用户名或密码错误</code></pre><h1 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h1><p><img src="/2019/07/24/servlet-shi-xian-deng-lu/%E7%99%BB%E5%BD%95%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90.bmp" alt="登录案例分析"></p><h1 id="技术分析"><a href="#技术分析" class="headerlink" title="技术分析"></a>技术分析</h1><h1 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h1><p>​    </p><pre><code>1. 创建项目，导入html页面，配置文件，jar包</code></pre><p>2.创建数据库环境</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> day14<span class="token punctuation">;</span><span class="token keyword">USE</span> day14<span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">USER</span><span class="token punctuation">(</span> id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>username <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">UNIQUE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>PASSWORD <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>     </code></pre><p>3.创建包cn.itcast.domain,创建类User</p><pre><code>3. package cn.itcast.domain;/**      - 用户的实体类*/public class User {private int id;private String username;private String password;public int getId() {return id;}​    public void setId(int id) {​        this.id = id;​    }​    public String getUsername() {​        return username;​    }​    public void setUsername(String username) {​        this.username = username;​    }​    public String getPassword() {​        return password;​    }​    public void setPassword(String password) {​        this.password = password;​    }​    @Override​    public String toString() {​        return &quot;User{&quot; +​                &quot;id=&quot; + id +​                &quot;, username=&#39;&quot; + username + &#39;\&#39;&#39; +​                &quot;, password=&#39;&quot; + password + &#39;\&#39;&#39; +​                &#39;}&#39;;​    }}</code></pre><ol start="4"><li>创建包cn.itcast.util,编写工具类JDBCUtils</li></ol><pre><code>package cn.itcast.util;import com.alibaba.druid.pool.DruidDataSourceFactory;import javax.sql.DataSource;import javax.xml.crypto.Data;import java.io.IOException;import java.io.InputStream;import java.sql.Connection;import java.sql.SQLException;import java.util.Properties;/**- JDBC工具类 使用Durid连接池  */  public class JDBCUtils {  private static DataSource ds ;  static {  ​    try {  ​        //1.加载配置文件  ​        Properties pro = new Properties();  ​        //使用ClassLoader加载配置文件，获取字节输入流  ​        InputStream is = JDBCUtils.class.getClassLoader().getResourceAsStream(&quot;druid.properties&quot;);  ​        pro.load(is);  ​        //2.初始化连接池对象  ​        ds = DruidDataSourceFactory.createDataSource(pro);  ​    } catch (IOException e) {  ​        e.printStackTrace();  ​    } catch (Exception e) {  ​        e.printStackTrace();  ​    }  }  /**  - 获取连接池对象    */    public static DataSource getDataSource(){    return ds;    }     /**  - 获取连接Connection对象    */    public static Connection getConnection() throws SQLException {    return  ds.getConnection();    }    }</code></pre><ol start="5"><li>创建包cn.itcast.dao,创建类UserDao,提供login方法</li></ol><pre><code>  package cn.itcast.dao;import cn.itcast.domain.User;    import cn.itcast.util.JDBCUtils;    import org.springframework.dao.DataAccessException;import org.springframework.jdbc.core.BeanPropertyRowMapper;    import org.springframework.jdbc.core.JdbcTemplate;    /**    - 操作数据库中User表的类      */      public class UserDao {  //声明JDBCTemplate对象共用  private JdbcTemplate template = new JdbcTemplate(JDBCUtils.getDataSource());   /**   - 登录方法   - @param loginUser 只有用户名和密码   - @return user包含用户全部数据,没有查询到，返回null     */     public User login(User loginUser){     try {     //1.编写sql      String sql = &quot;select * from user where username = ? and password = ?&quot;;      //2.调用query方法      User user = template.queryForObject(sql,              new BeanPropertyRowMapper&lt;User&gt;(User.class),              loginUser.getUsername(), loginUser.getPassword());                                  return user;  } catch (DataAccessException e) {      e.printStackTrace();//记录日志      return null;  }  }  }</code></pre><ol start="6"><li><p>编写cn.itcast.web.servlet.LoginServlet类</p><pre><code>  package cn.itcast.web.servlet; import cn.itcast.dao.UserDao; import cn.itcast.domain.User; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import java.io.IOException;         @WebServlet(&quot;/loginServlet&quot;) public class LoginServlet extends HttpServlet {         @Override         protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {             //1.设置编码             req.setCharacterEncoding(&quot;utf-8&quot;);             //2.获取请求参数             String username = req.getParameter(&quot;username&quot;);             String password = req.getParameter(&quot;password&quot;);             //3.封装user对象             User loginUser = new User();             loginUser.setUsername(username);             loginUser.setPassword(password);             //4.调用UserDao的login方法             UserDao dao = new UserDao();             User user = dao.login(loginUser);             //5.判断user             if(user == null){                 //登录失败                 req.getRequestDispatcher(&quot;/failServlet&quot;).forward(req,resp);             }else{                 //登录成功                 //存储数据                 req.setAttribute(&quot;user&quot;,user);                 //转发                 req.getRequestDispatcher(&quot;/successServlet&quot;).forward(req,resp);             }         }         @Override         protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {             this.doGet(req,resp);         }     }</code></pre></li></ol><pre><code>​    7. 编写FailServlet和SuccessServlet类</code></pre><pre><code>    @WebServlet(&quot;/successServlet&quot;)    public class SuccessServlet extends HttpServlet {        protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {            //获取request域中共享的user对象            User user = (User) request.getAttribute(&quot;user&quot;);            if(user != null){                //给页面写一句话                //设置编码                response.setContentType(&quot;text/html;charset=utf-8&quot;);                //输出                response.getWriter().write(&quot;登录成功！&quot;+user.getUsername()+&quot;,欢迎您&quot;);            }</code></pre><p> }<br>  ```</p><pre><code>    @WebServlet(&quot;/failServlet&quot;)    public class FailServlet extends HttpServlet {        protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {            //给页面写一句话            //设置编码            response.setContentType(&quot;text/html;charset=utf-8&quot;);            //输出            response.getWriter().write(&quot;登录失败，用户名或密码错误&quot;);        }        protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {            this.doPost(request,response);        }    }8. login.html中form表单的action路径的写法    * 虚拟目录+Servlet的资源路径9. BeanUtils工具类，简化数据封装    * 用于封装JavaBean的    1. JavaBean：标准的Java类        1. 要求：            1. 类必须被public修饰            2. 必须提供空参的构造器            3. 成员变量必须使用private修饰            4. 提供公共setter和getter方法        2. 功能：封装数据    2. 概念：        成员变量：        属性：setter和getter方法截取后的产物            例如：getUsername() --&gt; Username--&gt; username    3. 方法：        1. setProperty()        2. getProperty()        3. populate(Object obj , Map map):将map集合的键值对信息，封装到对应的JavaBean对象中</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 黑马 </tag>
            
            <tag> Servlet </tag>
            
            <tag> 登录 </tag>
            
            <tag> Druid JdbcTemplate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Servlet中request与respose</title>
      <link href="/2019/07/24/servlet-zhong-request-yu-respose/"/>
      <url>/2019/07/24/servlet-zhong-request-yu-respose/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>本文主要讲解了Servlet中的请求与响应的相关知识，首先通过HTTP协议引出Request与Response，</p><p>1.HTTP与Request、Response的联系</p><p>2.通过浏览器调试工具看懂请求与响应的参数、组成</p><p>3.通过Java API获取各种请求参数</p><p>4.GET与POST请求区别</p><h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><h2 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h2><p>Hyper Text Transfer Protocol超文本传输协议</p><h2 id="传输协议"><a href="#传输协议" class="headerlink" title="传输协议"></a>传输协议</h2><p>定义了客户端与服务器端通信时，发送的<strong>数据的格式</strong></p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>1.基于TCP/IP的高级协议</p><p>2.默认端口号：80</p><p>3.基于<strong>请求/响应</strong>模型：一次请求对应一次响应</p><p>4.无状态：每次响应相互独立，不能交换数据</p><h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><p>HTTP是基于请求/响应模型，接着介绍请求与响应的数据格式。</p><h1 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h1><h2 id="请求消息的数据组成"><a href="#请求消息的数据组成" class="headerlink" title="请求消息的数据组成"></a>请求消息的数据组成</h2><h3 id="1-请求行"><a href="#1-请求行" class="headerlink" title="1 请求行"></a>1 请求行</h3><h4 id="1-1-格式"><a href="#1-1-格式" class="headerlink" title="1.1 格式"></a>1.1 格式</h4><p>格式：<code>请求方式    请求URL    请求协议/版本</code></p><p>例子： <code>GET    /login.html  HTTP /1.1</code></p><h4 id="1-2-请求方式"><a href="#1-2-请求方式" class="headerlink" title="1.2 请求方式"></a>1.2 请求方式</h4><ul><li><p>HTTP协议有7中请求方式，常用的有2种</p><ul><li><p>GET</p><ul><li>请求参数在请求行中，在URL后紧跟（例如：localhost/demo3<strong>?username=zhangsan</strong>)</li><li>请求的url长度有限制</li><li>不太安全</li></ul></li><li><p>POST</p><ul><li>请求参数在请求体中</li><li>请求的url长度没有限制</li><li>较安全</li></ul></li></ul></li><li><p>GET与POST请求方式的区别</p><ul><li>参数位置不同：GET请求参数在请求行中，POST请求参数在请求体中</li></ul></li></ul><blockquote><table><thead><tr><th></th><th>GET</th><th>POST</th></tr></thead><tbody><tr><td>后退按钮/刷新</td><td>无害</td><td>数据会被重新提交（浏览器应该告知用户数据会被重新提交）。</td></tr><tr><td>书签</td><td>可收藏为书签</td><td>不可收藏为书签</td></tr><tr><td>缓存</td><td>能被缓存</td><td>不能缓存</td></tr><tr><td>编码类型</td><td>application/x-www-form-urlencoded</td><td>application/x-www-form-urlencoded 或 multipart/form-data。为二进制数据使用多重编码。</td></tr><tr><td>历史</td><td>参数保留在浏览器历史中。</td><td>参数不会保存在浏览器历史中。</td></tr><tr><td>对数据长度的限制</td><td>是的。当发送数据时，GET 方法向 URL 添加数据；URL 的长度是受限制的（URL 的最大长度是 2048 个字符）。</td><td>无限制。</td></tr><tr><td>对数据类型的限制</td><td>只允许 ASCII 字符。</td><td>没有限制。也允许二进制数据。</td></tr><tr><td>安全性</td><td>与 POST 相比，GET 的安全性较差，因为所发送的数据是 URL 的一部分。 在发送密码或其他敏感信息时绝不要使用 GET ！</td><td>POST 比 GET 更安全，因为参数不会被保存在浏览器历史或 web 服务器日志中。</td></tr><tr><td>可见性</td><td>数据在 URL 中对所有人都是可见的。</td><td>数据不会显示在 URL 中。</td></tr></tbody></table></blockquote><ul><li>哪些是GET请求与哪些是POST请求方式</li></ul><h4 id="1-3-请求协议版本"><a href="#1-3-请求协议版本" class="headerlink" title="1.3 请求协议版本"></a>1.3 请求协议版本</h4><pre><code>+ HTTP1.0：每一次请求响应都会建立新的连接+ HTTP1.1：复用连接</code></pre><h3 id="2-请求头"><a href="#2-请求头" class="headerlink" title="2 请求头"></a>2 请求头</h3><h4 id="2-1-格式"><a href="#2-1-格式" class="headerlink" title="2.1 格式"></a>2.1 格式</h4><p>格式：<code>请求头名称： 请求头值</code></p><p>例子： </p><pre><code>Host: start.firefoxchina.cnUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:68.0) Gecko/20100101 Firefox/68.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Accept-Encoding: gzip, deflate, brConnection: keep-aliveCookie: Hm_lvt_dd4738b5fb302cb062ef19107df5d2e4=1563503173; uid=rBADnV01Ana3AXyPe2C8Ag==Upgrade-Insecure-Requests: 1Cache-Control: max-age=0</code></pre><h4 id="2-2-常见请求头"><a href="#2-2-常见请求头" class="headerlink" title="2.2 常见请求头"></a>2.2 常见请求头</h4><ul><li><p>Host:请求的主机地址</p></li><li><p>User-Agent：浏览器告诉服务器，我访问你使用的浏览器版本信息</p></li><li><p>可以在服务器端获取该头的信息，解决浏览器的<strong>兼容性问题</strong></p></li><li><p>Accept：浏览器告诉告诉服务器，服务器可以<strong>响应什么样的数据格式</strong>给浏览器</p></li><li><p>Accept-Language: 浏览器可以支持的语言环境</p></li><li><p>Accept-Encoding：浏览器可以支持的压缩格式</p></li><li><p>Referer：</p><pre><code>* 告诉服务器，我(当前请求)从哪里来？    * 作用：         1. 防盗链：         2. 统计工作：</code></pre></li><li><p>Connection:是否可以复用连接</p><ul><li>值为keep-alive表示可以被复用(HTTP1.1)</li></ul></li></ul><h3 id="3-请求空行"><a href="#3-请求空行" class="headerlink" title="3 请求空行"></a>3 请求空行</h3><p>空行</p><pre><code>用于分割POST请求头与请求体的</code></pre><h3 id="4-请求体（正文）"><a href="#4-请求体（正文）" class="headerlink" title="4 请求体（正文）"></a>4 请求体（正文）</h3><ul><li><p>封装POST请求消息的请求参数的</p><p>GET方式没有请求体</p></li></ul><h2 id="请求字符串总格式"><a href="#请求字符串总格式" class="headerlink" title="请求字符串总格式"></a>请求字符串总格式</h2><pre><code>POST  /login.html  HTTP /1.1Host: start.firefoxchina.cnUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:68.0) Gecko/20100101 Firefox/68.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Accept-Encoding: gzip, deflate, brConnection: keep-aliveCookie: Hm_lvt_dd4738b5fb302cb062ef19107df5d2e4=1563503173; uid=rBADnV01Ana3AXyPe2C8Ag==Upgrade-Insecure-Requests: 1Cache-Control: max-age=0username=zhangsan</code></pre><h2 id="浏览器查看请求与响应"><a href="#浏览器查看请求与响应" class="headerlink" title="浏览器查看请求与响应"></a>浏览器查看请求与响应</h2><h1 id="request对象"><a href="#request对象" class="headerlink" title="request对象"></a>request对象</h1><h2 id="1-request对象和response对象的原理"><a href="#1-request对象和response对象的原理" class="headerlink" title="1 request对象和response对象的原理"></a>1 request对象和response对象的原理</h2><ol><li>request和response对象是由<strong>服务器创建</strong>的。我们来使用它们</li><li>request对象作用是来获取请求消息，response对象是来设置响应消息</li></ol><p><img src="/2019/07/24/servlet-zhong-request-yu-respose/request&response%E5%AF%B9%E8%B1%A1%E5%8E%9F%E7%90%86.png" alt="request&amp;response对象原理"></p><h2 id="2-request对象继承体系结构"><a href="#2-request对象继承体系结构" class="headerlink" title="2 request对象继承体系结构"></a>2 request对象继承体系结构</h2><pre><code>ServletRequest        --    接口    |    继承HttpServletRequest    -- 接口    |    实现org.apache.catalina.connector.RequestFacade 类(tomcat)</code></pre><h2 id="3-request对象功能"><a href="#3-request对象功能" class="headerlink" title="3 request对象功能"></a>3 request对象功能</h2><h3 id="3-1-获取请求消息的数据"><a href="#3-1-获取请求消息的数据" class="headerlink" title="3.1 获取请求消息的数据"></a>3.1 获取请求消息的数据</h3><h4 id="3-1-1-获取请求行数据"><a href="#3-1-1-获取请求行数据" class="headerlink" title="3.1.1 获取请求行数据"></a>3.1.1 获取请求行数据</h4><pre class=" language-java"><code class="language-java">    <span class="token operator">*</span> GET <span class="token operator">/</span>day14<span class="token operator">/</span>demo1<span class="token operator">?</span>name<span class="token operator">=</span>zhangsan<span class="token operator">&amp;</span>age<span class="token operator">=</span><span class="token number">12</span> HTTP<span class="token operator">/</span><span class="token number">1.1</span>    <span class="token operator">*</span> 方法：        <span class="token number">1</span><span class="token punctuation">.</span> 获取请求方式 ：GET            <span class="token operator">*</span> String <span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token number">2</span><span class="token punctuation">.</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>获取虚拟目录：<span class="token operator">/</span>day14            <span class="token operator">*</span> String <span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token number">3</span><span class="token punctuation">.</span> 获取Servlet路径<span class="token operator">:</span> <span class="token operator">/</span>demo1            <span class="token operator">*</span> String <span class="token function">getServletPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token number">4</span><span class="token punctuation">.</span> 获取get方式请求参数：name<span class="token operator">=</span>zhangsan<span class="token operator">&amp;</span>age<span class="token operator">=</span><span class="token number">12</span>            <span class="token operator">*</span> String <span class="token function">getQueryString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token number">5</span><span class="token punctuation">.</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>获取请求URI：<span class="token operator">/</span>day14<span class="token operator">/</span>demo1            <span class="token operator">*</span> String <span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>        <span class="token operator">/</span>day14<span class="token operator">/</span>demo1            <span class="token operator">*</span> StringBuffer <span class="token function">getRequestURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">:</span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">/</span>day14<span class="token operator">/</span>demo1            <span class="token operator">*</span> URL<span class="token operator">:</span>统一资源定位符 ： http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">/</span>day14<span class="token operator">/</span>demo1    中华人民共和国            <span class="token operator">*</span> URI：统一资源标识符 <span class="token operator">:</span> <span class="token operator">/</span>day14<span class="token operator">/</span>demo1                    共和国        <span class="token number">6</span><span class="token punctuation">.</span> 获取协议及版本：HTTP<span class="token operator">/</span><span class="token number">1.1</span>            <span class="token operator">*</span> String <span class="token function">getProtocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token number">7</span><span class="token punctuation">.</span> 获取客户机的IP地址：            <span class="token operator">*</span> String <span class="token function">getRemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="3-1-2-获取请求头数据"><a href="#3-1-2-获取请求头数据" class="headerlink" title="3.1.2 获取请求头数据"></a>3.1.2 获取请求头数据</h4><pre class=" language-java"><code class="language-java">        <span class="token operator">*</span> 方法：            <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>String <span class="token function">getHeader</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token operator">:</span>通过请求头的名称获取请求头的值            <span class="token operator">*</span> Enumeration<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">getHeaderNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>获取所有的请求头名称</code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 判断agent的浏览器版本  </span>String agent <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"user-agent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//判断agent的浏览器版本</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>agent<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"Chrome"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//谷歌</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"谷歌来了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>agent<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"Firefox"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//火狐</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"火狐来了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//演示获取请求头数据:referer</span>    String referer <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"referer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>referer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//http://localhost/day14/login.html</span>    <span class="token comment" spellcheck="true">//防盗链</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>referer <span class="token operator">!=</span> null <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>referer<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"/day14"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//正常访问</span>           <span class="token comment" spellcheck="true">// System.out.println("播放电影....");</span>            response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"播放电影...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//盗链</span>            <span class="token comment" spellcheck="true">//System.out.println("想看电影吗？来优酷吧...");</span>            response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"想看电影吗？来优酷吧..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h4 id="3-1-3-获取请求体数据"><a href="#3-1-3-获取请求体数据" class="headerlink" title="3.1.3 获取请求体数据"></a>3.1.3 获取请求体数据</h4><pre class=" language-java"><code class="language-java">        <span class="token operator">*</span> 请求体：只有POST请求方式，才有请求体，在请求体中封装了POST请求的请求参数        <span class="token operator">*</span> 步骤：            <span class="token number">1</span><span class="token punctuation">.</span> 获取流对象                <span class="token operator">*</span>  BufferedReader <span class="token function">getReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：获取字符输入流，只能操作字符数据                <span class="token operator">*</span>  ServletInputStream <span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：获取字节输入流，可以操作所有类型数据                    <span class="token operator">*</span> 在文件上传知识点后讲解            <span class="token number">2</span><span class="token punctuation">.</span> 再从流对象中拿数据</code></pre><pre class=" language-java"><code class="language-java">   <span class="token comment" spellcheck="true">//获取请求消息体--请求参数</span>    <span class="token comment" spellcheck="true">//1.获取字符流</span>    BufferedReader br <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2.读取数据</span>    String line <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="3-2-其他功能"><a href="#3-2-其他功能" class="headerlink" title="3.2 其他功能"></a>3.2 其他功能</h3><pre class=" language-java"><code class="language-java">    <span class="token number">1</span><span class="token punctuation">.</span> 获取请求参数通用方式：不论get还是post请求方式都可以使用下列方法来获取请求参数        <span class="token number">1</span><span class="token punctuation">.</span> String <span class="token function">getParameter</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token operator">:</span>根据参数名称获取参数值    username<span class="token operator">=</span>zs<span class="token operator">&amp;</span>password<span class="token operator">=</span><span class="token number">123</span>        <span class="token number">2</span><span class="token punctuation">.</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getParameterValues</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token operator">:</span>根据参数名称获取参数值的数组<span class="token punctuation">(</span>复选框<span class="token punctuation">)</span>  hobby<span class="token operator">=</span>xx<span class="token operator">&amp;</span>hobby<span class="token operator">=</span>game        <span class="token number">3</span><span class="token punctuation">.</span> Enumeration<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">getParameterNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>获取所有请求的参数名称        <span class="token number">4</span><span class="token punctuation">.</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>获取所有参数的map集合        <span class="token operator">*</span> 中文乱码问题：            <span class="token operator">*</span> get方式：tomcat <span class="token number">8</span> 已经将get方式乱码问题解决了            <span class="token operator">*</span> post方式：会乱码                <span class="token operator">*</span> 解决：在获取参数前，设置request的编码request<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//post 获取请求参数</span>    <span class="token comment" spellcheck="true">//根据参数名称获取参数值</span>    String username <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* System.out.println("post");    System.out.println(username);*/</span>   <span class="token comment" spellcheck="true">//根据参数名称获取参数值的数组</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> hobbies <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameterValues</span><span class="token punctuation">(</span><span class="token string">"hobby"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*for (String hobby : hobbies) {        System.out.println(hobby);    }*/</span>    <span class="token comment" spellcheck="true">//获取所有请求的参数名称</span>    Enumeration<span class="token operator">&lt;</span>String<span class="token operator">></span> parameterNames <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameterNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*while(parameterNames.hasMoreElements()){        String name = parameterNames.nextElement();        System.out.println(name);        String value = request.getParameter(name);//只能获取多选框的一个值        System.out.println(value);        System.out.println("----------------");    }*/</span>    <span class="token comment" spellcheck="true">// 获取所有参数的map集合</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> parameterMap <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//遍历</span>    Set<span class="token operator">&lt;</span>String<span class="token operator">></span> keyset <span class="token operator">=</span> parameterMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String name <span class="token operator">:</span> keyset<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取键获取值</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> values <span class="token operator">=</span> parameterMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String value <span class="token operator">:</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token number">2</span><span class="token punctuation">.</span> 请求转发：一种在服务器内部的资源跳转方式        <span class="token number">1</span><span class="token punctuation">.</span> 步骤：            <span class="token number">1</span><span class="token punctuation">.</span> 通过request对象获取请求转发器对象：RequestDispatcher <span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span>String path<span class="token punctuation">)</span>            <span class="token number">2</span><span class="token punctuation">.</span> 使用RequestDispatcher对象来进行转发：<span class="token function">forward</span><span class="token punctuation">(</span>ServletRequest request<span class="token punctuation">,</span> ServletResponse response<span class="token punctuation">)</span>         <span class="token number">2</span><span class="token punctuation">.</span> 特点：            <span class="token number">1</span><span class="token punctuation">.</span> 浏览器地址栏路径不发生变化            <span class="token number">2</span><span class="token punctuation">.</span> 只能转发到当前服务器内部资源中。            <span class="token number">3</span><span class="token punctuation">.</span> 转发是一次请求    <span class="token number">3</span><span class="token punctuation">.</span> 共享数据：        <span class="token operator">*</span> 域对象：一个有作用范围的对象，可以在范围内共享数据        <span class="token operator">*</span> request域：代表一次请求的范围，一般用于请求转发的多个资源中共享数据        <span class="token operator">*</span> 方法：            <span class="token number">1</span><span class="token punctuation">.</span> <span class="token keyword">void</span> <span class="token function">setAttribute</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span>Object obj<span class="token punctuation">)</span><span class="token operator">:</span>存储数据            <span class="token number">2</span><span class="token punctuation">.</span> Object <span class="token function">getAttitude</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token operator">:</span>通过键获取值            <span class="token number">3</span><span class="token punctuation">.</span> <span class="token keyword">void</span> <span class="token function">removeAttribute</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token operator">:</span>通过键移除键值对    <span class="token number">4</span><span class="token punctuation">.</span> 获取ServletContext：        <span class="token operator">*</span> ServletContext <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Servlet </tag>
            
            <tag> Java Web </tag>
            
            <tag> Request </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python环境安装</title>
      <link href="/2019/07/22/python-huan-jing-an-zhuang/"/>
      <url>/2019/07/22/python-huan-jing-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h1 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h1><h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p><a href="https://www.python.org/downloads" target="_blank" rel="noopener">Python官网安装地址</a> : <a href="https://www.python.org/downloads" target="_blank" rel="noopener">https://www.python.org/downloads</a></p><p>以安装<a href="https://www.python.org/downloads/release/python-374/" target="_blank" rel="noopener">Python 3.7.4</a>为例</p><h2 id="安装包选项"><a href="#安装包选项" class="headerlink" title="安装包选项"></a>安装包选项</h2><h3 id="安装包选项如下："><a href="#安装包选项如下：" class="headerlink" title="安装包选项如下："></a>安装包选项如下：</h3><table><thead><tr><th>Version</th><th>Operating System</th><th>Description</th><th>File Size</th><th>GPG</th></tr></thead><tbody><tr><td><a href="https://www.python.org/ftp/python/3.7.4/Python-3.7.4.tgz" target="_blank" rel="noopener">Gzipped source tarball</a></td><td>Source release</td><td></td><td>23017663</td><td><a href="https://www.python.org/ftp/python/3.7.4/Python-3.7.4.tgz.asc" target="_blank" rel="noopener">SIG</a></td></tr><tr><td><a href="https://www.python.org/ftp/python/3.7.4/Python-3.7.4.tar.xz" target="_blank" rel="noopener">XZ compressed source tarball</a></td><td>Source release</td><td></td><td>17131432</td><td><a href="https://www.python.org/ftp/python/3.7.4/Python-3.7.4.tar.xz.asc" target="_blank" rel="noopener">SIG</a></td></tr><tr><td><a href="https://www.python.org/ftp/python/3.7.4/python-3.7.4-macosx10.6.pkg" target="_blank" rel="noopener">macOS 64-bit/32-bit installer</a></td><td>Mac OS X</td><td>for Mac OS X 10.6 and later</td><td>34898416</td><td><a href="https://www.python.org/ftp/python/3.7.4/python-3.7.4-macosx10.6.pkg.asc" target="_blank" rel="noopener">SIG</a></td></tr><tr><td><a href="https://www.python.org/ftp/python/3.7.4/python-3.7.4-macosx10.9.pkg" target="_blank" rel="noopener">macOS 64-bit installer</a></td><td>Mac OS X</td><td>for OS X 10.9 and later</td><td>28082845</td><td><a href="https://www.python.org/ftp/python/3.7.4/python-3.7.4-macosx10.9.pkg.asc" target="_blank" rel="noopener">SIG</a></td></tr><tr><td><a href="https://www.python.org/ftp/python/3.7.4/python374.chm" target="_blank" rel="noopener">Windows help file</a></td><td>Windows</td><td></td><td>8131761</td><td><a href="https://www.python.org/ftp/python/3.7.4/python374.chm.asc" target="_blank" rel="noopener">SIG</a></td></tr><tr><td><a href="https://www.python.org/ftp/python/3.7.4/python-3.7.4-embed-amd64.zip" target="_blank" rel="noopener">Windows x86-64 embeddable zip file</a></td><td>Windows</td><td>for AMD64/EM64T/x64</td><td>7504391</td><td><a href="https://www.python.org/ftp/python/3.7.4/python-3.7.4-embed-amd64.zip.asc" target="_blank" rel="noopener">SIG</a></td></tr><tr><td><a href="https://www.python.org/ftp/python/3.7.4/python-3.7.4-amd64.exe" target="_blank" rel="noopener">Windows x86-64 executable installer</a></td><td>Windows</td><td>for AMD64/EM64T/x64</td><td>26680368</td><td><a href="https://www.python.org/ftp/python/3.7.4/python-3.7.4-amd64.exe.asc" target="_blank" rel="noopener">SIG</a></td></tr><tr><td><a href="https://www.python.org/ftp/python/3.7.4/python-3.7.4-amd64-webinstall.exe" target="_blank" rel="noopener">Windows x86-64 web-based installer</a></td><td>Windows</td><td>for AMD64/EM64T/x64</td><td>1362904</td><td><a href="https://www.python.org/ftp/python/3.7.4/python-3.7.4-amd64-webinstall.exe.asc" target="_blank" rel="noopener">SIG</a></td></tr><tr><td><a href="https://www.python.org/ftp/python/3.7.4/python-3.7.4-embed-win32.zip" target="_blank" rel="noopener">Windows x86 embeddable zip file</a></td><td>Windows</td><td></td><td>6741626</td><td><a href="https://www.python.org/ftp/python/3.7.4/python-3.7.4-embed-win32.zip.asc" target="_blank" rel="noopener">SIG</a></td></tr><tr><td><a href="https://www.python.org/ftp/python/3.7.4/python-3.7.4.exe" target="_blank" rel="noopener">Windows x86 executable installer</a></td><td>Windows</td><td></td><td>25663848</td><td><a href="https://www.python.org/ftp/python/3.7.4/python-3.7.4.exe.asc" target="_blank" rel="noopener">SIG</a></td></tr><tr><td><a href="https://www.python.org/ftp/python/3.7.4/python-3.7.4-webinstall.exe" target="_blank" rel="noopener">Windows x86 web-based installer</a></td><td>Windows</td><td></td><td>1324608</td><td><a href="https://www.python.org/ftp/python/3.7.4/python-3.7.4-webinstall.exe.asc" target="_blank" rel="noopener">SIG</a></td></tr></tbody></table><h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><p>web-based installer 是需要通过联网完成安装的</p><p>executable installer 是可执行文件(*.exe)方式安装</p><p>embeddable zip file 嵌入式版本，可以集成到其它应用中。</p><p>embeddable zip file 嵌入式版本<a href="https://docs.python.org/3.5/using/windows.html#embedded-distribution" target="_blank" rel="noopener">官网描述</a>如下：</p><blockquote><p>The embedded distribution is a ZIP file containing a minimal Python environment. <strong>It is intended for acting as part of another application, rather than being directly accessed by end-users.</strong></p><p>When extracted, the embedded distribution is (almost) fully isolated from the user’s system, including environment variables, system registry settings, and installed packages. The standard library is included as pre-compiled and optimized .pyc files in a ZIP, and python3.dll, python35.dll, python.exe and pythonw.exe are all provided. <strong>Tcl/tk (including all dependants, such as Idle), pip and the Python documentation are not included.</strong></p><p><strong>Note：</strong>The embedded distribution <strong>does not include the <a href="https://www.microsoft.com/en-us/download/details.aspx?id=48145" target="_blank" rel="noopener">Microsoft C Runtime</a></strong> and it is the responsibility of the application installer to provide this. The runtime may have already been installed on a user’s system previously or automatically via Windows Update, and can be detected by finding ucrtbase.dll in the system directory.</p><p>Third-party packages should be installed by the application installer alongside the embedded distribution. Using pip to manage dependencies as for a regular Python installation is not supported with this distribution, though with some care it may be possible to include and use pip for automatic updates. In general, third-party packages should be treated as part of the application (“vendoring”) so that the developer can ensure compatibility with newer versions before providing updates to users.</p><p>The two recommended use cases for this distribution are described below.</p></blockquote><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><p>选择安装<a href="https://www.python.org/ftp/python/3.7.4/python-3.7.4-amd64.exe" target="_blank" rel="noopener">Windows x86-64 executable installer</a>版本</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>1.双击python-3.7.4-amd64.exe</p><p>首页界面</p><p><img src="/2019/07/22/python-huan-jing-an-zhuang/%E5%AE%89%E8%A3%85%E7%95%8C%E9%9D%A21.png" alt="安装首页"></p><p>点击自定义安装</p><p><img src="/2019/07/22/python-huan-jing-an-zhuang/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AE%89%E8%A3%85%E7%95%8C%E9%9D%A22.png" alt></p><p>说明：</p><p><a href="https://www.cnblogs.com/Neeo/p/8393805.html" target="_blank" rel="noopener">Python launcher根据文件头自动帮我们调用了指定版本的解释器来执行该文件。</a></p><p>勾选相应需求，点击下一步</p><p><img src="/2019/07/22/python-huan-jing-an-zhuang/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AE%89%E8%A3%85%E7%95%8C%E9%9D%A23.png" alt></p><p>点击安装</p><blockquote><p>注意：如果是第一次安装，安装完成后会有个提示 Removing the MAX_PATH Limitation。我们选择Enable即可。主要原因是 Windows historically has limited path lengths to 260 characters. This meant that paths longer than this would not resolve and errors would result.也可以手动修改注册表HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\FileSystem@LongPathsEnabled to 1.</p></blockquote><h3 id="检测安装"><a href="#检测安装" class="headerlink" title="检测安装"></a>检测安装</h3><p><code>Win+r</code>  ==&gt; <code>cmd</code> 调出命令行窗口</p><p>输入<code>python --version</code> </p><p>输入<code>pip --version</code></p><p><img src="/2019/07/22/python-huan-jing-an-zhuang/%E6%A3%80%E6%B5%8B%E5%AE%89%E8%A3%85.png" alt></p><h2 id="安装目录介绍"><a href="#安装目录介绍" class="headerlink" title="安装目录介绍"></a>安装目录介绍</h2><p><img src="/2019/07/22/python-huan-jing-an-zhuang/%E5%AE%89%E8%A3%85%E7%9B%AE%E5%BD%95.png" alt></p><p>下面简单介绍一下目录、文件的具体用途：</p><pre><code>DLLs： Python 自己使用的动态库Doc： 自带的 Python 使用说明文档include： 包含共享目录Lib： 库文件，放自定义模块和包libs： 编译生成的Python 自己使用的静态库Scripts： 各种包/模块对应的可执行程序。安装时如果选择了pip。那么pip的可执行程序就在此！tcl： 桌面编程包</code></pre><hr><p>参考文献<br>原文：<a href="https://blog.csdn.net/ZCShouCSDN/article/details/84990674" target="_blank" rel="noopener">https://blog.csdn.net/ZCShouCSDN/article/details/84990674</a> </p><h2 id="嵌入式python安装"><a href="#嵌入式python安装" class="headerlink" title="嵌入式python安装"></a>嵌入式python安装</h2><p>1.选择安装<a href="https://www.python.org/ftp/python/3.7.4/python-3.7.4-embed-amd64.zip" target="_blank" rel="noopener">Windows x86-64 embeddable zip file</a>版本</p><p>2.安装pip</p><p>下载<a href="https://bootstrap.pypa.io/get-pip.py" target="_blank" rel="noopener">get-pip.py</a>到解压后的目录中:</p><p><img src="http://wwj-fig-bed.just4fun.site/pip_6580f932.png" alt="img"></p><p>3.之后运行:<code>.\python get-pip.py</code></p><p>修改<code>python37._pth</code>:</p><pre><code>python37.zip.# Uncomment to run site.main() automaticallyimport site   # 去掉注释</code></pre><p>4.安装第三方库</p><p>命令行切换到当前pythonan安装目录</p><p>执行命令：</p><pre><code>.\python -m pip install 库名</code></pre><p>5.python程序执行</p><pre><code>.\python C:\Users\DELL\Downloads\Compressed\python-3.7.4-embed-amd64\coding\my.py</code></pre><h2 id="Python常用命令行"><a href="#Python常用命令行" class="headerlink" title="Python常用命令行"></a>Python常用命令行</h2><p>1.运行python 程序</p><pre><code>.\python python文件名带后缀名</code></pre><p>例子：<code>.\python my.py</code></p><p>2.安装第三方库或者包</p><pre><code>.\python -m pip install  库名</code></pre><p>例子：<code>.\python -m pip install qrcode</code></p><h2 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h2><p>安装目录的各个数据分别是哪里来的？</p><p>在<code>Lib/site-packages</code>设置环境变量的作用</p><p>pip安装的模块安装在哪个目录，如何自定义安装目录？</p><p>Scripts目录里的可执行文件是如何产生的？</p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 环境安装 </tag>
            
            <tag> 绿色开发软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试页面</title>
      <link href="/2019/07/17/ce-shi-ye-mian/"/>
      <url>/2019/07/17/ce-shi-ye-mian/</url>
      
        <content type="html"><![CDATA[<h1 id="测试页面"><a href="#测试页面" class="headerlink" title="测试页面"></a>测试页面</h1><h2 id="我的第一个页面"><a href="#我的第一个页面" class="headerlink" title="我的第一个页面"></a>我的第一个页面</h2>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
            <tag> 第一个页面 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/07/17/hello-world/"/>
      <url>/2019/07/17/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h2 id="Quick-Start-1"><a href="#Quick-Start-1" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
            <tag> 第一个页面 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
